<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>字节跳动</title>
    <link href="/2021/12/23/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/"/>
    <url>/2021/12/23/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="日常实习"><a href="#日常实习" class="headerlink" title="日常实习"></a>日常实习</h1><h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><h2 id="项目询问"><a href="#项目询问" class="headerlink" title="项目询问"></a>项目询问</h2><h2 id="基本数据结构与算法"><a href="#基本数据结构与算法" class="headerlink" title="基本数据结构与算法"></a>基本数据结构与算法</h2><h3 id="列举你所知道的O（NlogN）复杂度的排序算法；说一下归并排序，快速排序，堆排序的原理"><a href="#列举你所知道的O（NlogN）复杂度的排序算法；说一下归并排序，快速排序，堆排序的原理" class="headerlink" title="列举你所知道的O（NlogN）复杂度的排序算法；说一下归并排序，快速排序，堆排序的原理"></a>列举你所知道的O（NlogN）复杂度的排序算法；说一下归并排序，快速排序，堆排序的原理</h3><h3 id="哪些数据结构是用树实现的？"><a href="#哪些数据结构是用树实现的？" class="headerlink" title="哪些数据结构是用树实现的？"></a>哪些数据结构是用树实现的？</h3><p>答：哈希表</p><h3 id="红黑树是什么？如何往二叉平衡树里面添加节点？"><a href="#红黑树是什么？如何往二叉平衡树里面添加节点？" class="headerlink" title="红黑树是什么？如何往二叉平衡树里面添加节点？"></a>红黑树是什么？如何往二叉平衡树里面添加节点？</h3><h3 id="给定一个无序的数组，如何返回最大的K个元素？时间复杂度和空间复杂度是多少？"><a href="#给定一个无序的数组，如何返回最大的K个元素？时间复杂度和空间复杂度是多少？" class="headerlink" title="给定一个无序的数组，如何返回最大的K个元素？时间复杂度和空间复杂度是多少？"></a>给定一个无序的数组，如何返回最大的K个元素？时间复杂度和空间复杂度是多少？</h3><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="Java中数组是对象吗？"><a href="#Java中数组是对象吗？" class="headerlink" title="Java中数组是对象吗？"></a>Java中数组是对象吗？</h3><h3 id="Java内存管理是如何实现的？"><a href="#Java内存管理是如何实现的？" class="headerlink" title="Java内存管理是如何实现的？"></a>Java内存管理是如何实现的？</h3><h3 id="用过Java多线程吗？"><a href="#用过Java多线程吗？" class="headerlink" title="用过Java多线程吗？"></a>用过Java多线程吗？</h3><h3 id="用过Java锁吗？"><a href="#用过Java锁吗？" class="headerlink" title="用过Java锁吗？"></a>用过Java锁吗？</h3><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="死锁是什么？四个条件"><a href="#死锁是什么？四个条件" class="headerlink" title="死锁是什么？四个条件"></a>死锁是什么？四个条件</h3><h3 id="线程和进程的关系是什么？"><a href="#线程和进程的关系是什么？" class="headerlink" title="线程和进程的关系是什么？"></a>线程和进程的关系是什么？</h3><h3 id="你常用的Linux指令有哪些？"><a href="#你常用的Linux指令有哪些？" class="headerlink" title="你常用的Linux指令有哪些？"></a>你常用的Linux指令有哪些？</h3><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="HTTPS工作原理是什么？"><a href="#HTTPS工作原理是什么？" class="headerlink" title="HTTPS工作原理是什么？"></a>HTTPS工作原理是什么？</h3><h3 id="TCP如何建立连接？如果客户端收不到确认会做出什么动作？"><a href="#TCP如何建立连接？如果客户端收不到确认会做出什么动作？" class="headerlink" title="TCP如何建立连接？如果客户端收不到确认会做出什么动作？"></a>TCP如何建立连接？如果客户端收不到确认会做出什么动作？</h3><h2 id="虚拟化技术"><a href="#虚拟化技术" class="headerlink" title="虚拟化技术"></a>虚拟化技术</h2><h3 id="说说你对Docker的理解"><a href="#说说你对Docker的理解" class="headerlink" title="说说你对Docker的理解"></a>说说你对Docker的理解</h3><h2 id="OJ编程"><a href="#OJ编程" class="headerlink" title="OJ编程"></a>OJ编程</h2><h3 id="买卖股票的最大利润"><a href="#买卖股票的最大利润" class="headerlink" title="买卖股票的最大利润"></a>买卖股票的最大利润</h3><p>会要求你自己写测试用例，记得加static不然没有访问权限</p>]]></content>
    
    
    <categories>
      
      <category>面经</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Bytedance</title>
    <link href="/2021/12/23/Bytedance/"/>
    <url>/2021/12/23/Bytedance/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Thinking in Java</title>
    <link href="/2021/12/21/Java/"/>
    <url>/2021/12/21/Java/</url>
    
    <content type="html"><![CDATA[<h1 id="对象导论"><a href="#对象导论" class="headerlink" title="对象导论"></a>对象导论</h1><h1 id="一切都是对象"><a href="#一切都是对象" class="headerlink" title="一切都是对象"></a>一切都是对象</h1><h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><h1 id="控制执行流程"><a href="#控制执行流程" class="headerlink" title="控制执行流程"></a>控制执行流程</h1><h1 id="初始化与清理"><a href="#初始化与清理" class="headerlink" title="初始化与清理"></a>初始化与清理</h1><h1 id="访问控制权限"><a href="#访问控制权限" class="headerlink" title="访问控制权限"></a>访问控制权限</h1><h1 id="复用类"><a href="#复用类" class="headerlink" title="复用类"></a>复用类</h1><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口类比C++纯虚函数，抽象类，不需要知道内部实现，就是告诉你有这么个东西（接口），具体怎么实现的话，自己继承的时候再添。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>requirements</title>
    <link href="/2021/12/17/requirements/"/>
    <url>/2021/12/17/requirements/</url>
    
    <content type="html"><![CDATA[<h1 id="Stay-Hungry，Stay-Foolish"><a href="#Stay-Hungry，Stay-Foolish" class="headerlink" title="Stay Hungry，Stay Foolish"></a>Stay Hungry，Stay Foolish</h1><h2 id="Java-基本知识"><a href="#Java-基本知识" class="headerlink" title="Java 基本知识"></a>Java 基本知识</h2><p>熟悉集合框架、I/O框架，多线程，并发，Java新特性</p><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p>常用网络协议，HTTP/S，FTP，TCP/UDP，熟悉Socket网络编程</p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>熟悉Spring，Spring Boot， Mybatis</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>熟悉MySQL数据库 ，Redis缓存技术</p><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>熟练使用Maven，Git项目管理工具    </p>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二分搜索</title>
    <link href="/2021/12/14/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/"/>
    <url>/2021/12/14/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="边界条件"><a href="#边界条件" class="headerlink" title="边界条件"></a>边界条件</h1>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>大组会1213</title>
    <link href="/2021/12/14/%E5%A4%A7%E7%BB%84%E4%BC%9A1213/"/>
    <url>/2021/12/14/%E5%A4%A7%E7%BB%84%E4%BC%9A1213/</url>
    
    <content type="html"><![CDATA[<h1 id="整理一下"><a href="#整理一下" class="headerlink" title="整理一下"></a>整理一下</h1><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>问： 预测组网关键技术指的是哪些？<br>答：单链路预测（信道建模）+多链路组网</p><p>问：如果有地面站性能最佳，为什么不直接用那个？<br>答：可能并不代表全部时间段内都不存在问题</p><h2 id="赵老师"><a href="#赵老师" class="headerlink" title="赵老师"></a>赵老师</h2><p>原论文是说这个模型在微波链路的场景下可以100%可用<br>我的结果表明激光链路条件下天气影响会导致可能出现55/500的概率不可用？<br>第一步证明了真的会对激光链路带来影响</p><p>下一步就是如何改进</p><ol><li>缩短时隙，比1min更精确</li><li>增加备选地面站个数</li></ol><h2 id="方老师"><a href="#方老师" class="headerlink" title="方老师"></a>方老师</h2><p>这个真的是和预测相关的吗？</p><h2 id="李老师"><a href="#李老师" class="headerlink" title="李老师"></a>李老师</h2><ol><li><p>不一定激光的性能真的差，把论文里的雨衰数据代入我的模型，看一下结果，是不是会比55更差，如果更差就说明激光好嘛</p></li><li><p>可以加入吞吐量的其他QoS因素看一下我的模型中的网络性能</p></li><li><p>0，1模型改进，性能差一点也能接受，量化ILWC对链路的恶化影响</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>科研思路</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>树</title>
    <link href="/2021/12/09/%E6%A0%91/"/>
    <url>/2021/12/09/%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这种递归的数据结构，递归大法好！有助于理解它的结构，要多练<br>涉及深度优先和宽度优先的两种算法，深度优先——递归，宽度优先——迭代</p><p>基本所有的问题进行问题转移——给它的左孩子和右孩子去做，然后交上来，就是这个套路<br>（leftData，rightData）</p><h2 id="树的非递归方式遍历"><a href="#树的非递归方式遍历" class="headerlink" title="树的非递归方式遍历"></a>树的非递归方式遍历</h2><p>运用数据结构——栈<br>递归方式省略</p><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><p>头-左-右</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; preorderTraversal(TreeNode root) &#123;<br>    <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; ret = <span class="hljs-literal">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-built_in">Stack</span>&lt;TreeNode&gt; <span class="hljs-built_in">stack</span> = <span class="hljs-literal">new</span> <span class="hljs-built_in">Stack</span>&lt;&gt;();<br>    <span class="hljs-built_in">stack</span>.push(root);<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">stack</span>.isEmpty()) &#123;<br>        TreeNode node = <span class="hljs-built_in">stack</span>.pop();<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-built_in">null</span>) continue;<br>        ret.add(node.val);<br>        <span class="hljs-built_in">stack</span>.push(node.right);  <span class="hljs-comment">// 先右后左，保证左子树先遍历</span><br>        <span class="hljs-built_in">stack</span>.push(node.left);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>左-头-右</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; inorderTraversal(TreeNode root)&#123;<br><span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; res = <span class="hljs-literal">new</span> ArrayList&lt;&gt;();<br><span class="hljs-built_in">Stack</span>&lt;TreeNode&gt; <span class="hljs-built_in">stack</span> = <span class="hljs-literal">new</span> <span class="hljs-built_in">Stack</span>&lt;&gt;();<br>TreeNode cur  = root;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">stack</span>.isEmpty() || cur != <span class="hljs-built_in">null</span>)<br>&#123;<br><span class="hljs-keyword">while</span>(cur != <span class="hljs-built_in">null</span>)<br>&#123;<br>   <span class="hljs-built_in">stack</span>.push(cur);<br>   cur = cur.next;<br>&#125;<br>TreeNode node = <span class="hljs-built_in">stack</span>.pop();<br>res.add(node.val);<br>cur = node.right;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>左-右-头<br>其实和前序差不多，改变左右节点进栈顺序之后，反转即可</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; postorderTraversal(TreeNode root) &#123;<br>    <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; ret = <span class="hljs-literal">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-built_in">Stack</span>&lt;TreeNode&gt; <span class="hljs-built_in">stack</span> = <span class="hljs-literal">new</span> <span class="hljs-built_in">Stack</span>&lt;&gt;();<br>    <span class="hljs-built_in">stack</span>.push(root);<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">stack</span>.isEmpty()) &#123;<br>        TreeNode node = <span class="hljs-built_in">stack</span>.pop();<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-built_in">null</span>) continue;<br>        ret.add(node.val);<br>        <span class="hljs-built_in">stack</span>.push(node.left);<br>        <span class="hljs-built_in">stack</span>.push(node.right);<br>    &#125;<br>    Collections.reverse(ret);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="树的层序遍历"><a href="#树的层序遍历" class="headerlink" title="树的层序遍历"></a>树的层序遍历</h2><p>运用数据结构——队列</p><h3 id="每层节点的平均值"><a href="#每层节点的平均值" class="headerlink" title="每层节点的平均值"></a>每层节点的平均值</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ArrayList&lt;<span class="hljs-type">Double</span>&gt; res = <span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-built_in">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)<span class="hljs-keyword">return</span> res;<br>        queue.<span class="hljs-keyword">add</span>(root);<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty())<br>        &#123;   <br>            <span class="hljs-type">int</span> size = queue.size();<br>            <span class="hljs-type">Double</span> levelSum = <span class="hljs-number">0.0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =size;i&gt;<span class="hljs-number">0</span>;i<span class="hljs-comment">--)</span><br>            &#123;<br>                TreeNode node = queue.poll();<br>                levelSum += node.val;<br>                <span class="hljs-keyword">if</span>(node.left != <span class="hljs-keyword">null</span>)<br>                queue.<span class="hljs-keyword">add</span>(node.left);<br>                <span class="hljs-keyword">if</span>(node.right != <span class="hljs-keyword">null</span>)<br>                queue.<span class="hljs-keyword">add</span>(node.right);<br>            &#125;<br>            <span class="hljs-type">Double</span> levelAvg = levelSum /size;<br>            res.<span class="hljs-keyword">add</span>(levelAvg);  <br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br></code></pre></td></tr></table></figure><h2 id="最左的节点"><a href="#最左的节点" class="headerlink" title="最左的节点"></a>最左的节点</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">if</span>(root == <span class="hljs-built_in">null</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">Queue</span>&lt;TreeNode&gt; <span class="hljs-built_in">queue</span> = <span class="hljs-literal">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-built_in">queue</span>.add(root);<br>        <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">queue</span>.isEmpty())<br>        &#123;<br>            root = <span class="hljs-built_in">queue</span>.poll();<br>            <span class="hljs-keyword">if</span>(root.right !=<span class="hljs-built_in">null</span>) <span class="hljs-built_in">queue</span>.add(root.right);<br>            <span class="hljs-keyword">if</span>(root.left !=<span class="hljs-built_in">null</span>) <span class="hljs-built_in">queue</span>.add(root.left);<br>        &#125;<br>        <span class="hljs-keyword">return</span> root.val;<br></code></pre></td></tr></table></figure><h2 id="树的最大深度"><a href="#树的最大深度" class="headerlink" title="树的最大深度"></a>树的最大深度</h2><h3 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h3><h3 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h3>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2021/12/08/%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/12/08/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="逆序输出链表"><a href="#逆序输出链表" class="headerlink" title="逆序输出链表"></a>逆序输出链表</h2><p>ArrayList转为int数组的接口<br>想要转换成int[]类型，就得先转成IntStream。<br>通过mapToInt()把Stream<Integer>调用Integer::valueOf来转成IntStream<br>而IntStream中默认toArray()转成int[]</p><pre><code>int[] = list.stream().mapToInt(Integer::valueOf).toArray()</code></pre><h3 id="法1"><a href="#法1" class="headerlink" title="法1"></a>法1</h3><p>直接用栈实现，基本方法</p><h3 id="法2"><a href="#法2" class="headerlink" title="法2"></a>法2</h3><p>先存到数组中，再reverse</p><h3 id="法3"><a href="#法3" class="headerlink" title="法3"></a>法3</h3><p>反转链表正序输出</p><h3 id="法4"><a href="#法4" class="headerlink" title="法4"></a>法4</h3><p>递归，回溯法<br>递归，相当于函数调用函数，…，直到触发终止条件。回溯（即返回时），前面的那些函数才算“执行完毕”，才可以执行下面的 tmp.add(head.val)<br>递归函数的特点~ 当返回的时候， 返回的是最下层的 recur() ，而上层的 recur() 并没有退出，因此上层的 recur() 就会执行下面的 tmp.add(head.val) ~</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;<br>    ArrayList&lt;Integer&gt; tmp = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span>[] <span class="hljs-title">reversePrint</span>(<span class="hljs-params">ListNode head</span>)</span> &#123;<br>        recur(head);<br>        <span class="hljs-built_in">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[tmp.size()];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i =<span class="hljs-number">0</span>;i&lt;tmp.size();i++)<br>        &#123;<br>            res[i] = tmp.<span class="hljs-keyword">get</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">recur</span>(<span class="hljs-params">ListNode head</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span>;<br>        recur(head.next);<br>        tmp.<span class="hljs-keyword">add</span>(head.val);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除链表的倒数第n个节点"><a href="#删除链表的倒数第n个节点" class="headerlink" title="删除链表的倒数第n个节点"></a>删除链表的倒数第n个节点</h2><h3 id="法1-1"><a href="#法1-1" class="headerlink" title="法1"></a>法1</h3><p>直接先遍历计算长度，再删<br>新建哨兵节点是为了防止链表长度为1的情况</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> ListNode removeNthFromEnd(ListNode head, <span class="hljs-built_in">int</span> n) &#123;<br>        ListNode cur = head;<br>        <span class="hljs-built_in">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>)<br>        &#123;<br>            len ++;<br>            cur = cur.<span class="hljs-keyword">next</span>;<br>        &#125;<br>        ListNode dummy = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>,head);<br>        cur = dummy;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i =<span class="hljs-number">0</span>;i&lt;len-n;i++)<br>        &#123;   <br>            cur = cur.<span class="hljs-keyword">next</span>;<br>        &#125;<br>        cur.<span class="hljs-keyword">next</span> = cur.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>;<br><br>        <span class="hljs-keyword">return</span> dummy.<span class="hljs-keyword">next</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="法2-1"><a href="#法2-1" class="headerlink" title="法2"></a>法2</h3><p>双指针<br>快指针先往前面走n个，然后快慢一起走，快指针走完的时候，慢指针刚好到达倒数第n个节点</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> ListNode removeNthFromEnd(ListNode head, <span class="hljs-built_in">int</span> n) &#123;<br>        ListNode dummy = <span class="hljs-keyword">new</span> ListNode (<span class="hljs-number">0</span>,head);<br>        ListNode fast = dummy;<br>        ListNode slow = dummy;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i =<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            fast = fast.<span class="hljs-keyword">next</span>;<br>            <span class="hljs-keyword">if</span>(fast == <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> dummy.<span class="hljs-keyword">next</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(fast.<span class="hljs-keyword">next</span> != <span class="hljs-literal">null</span>)<br>        &#123;<br>            fast = fast.<span class="hljs-keyword">next</span>;<br>            slow = slow.<span class="hljs-keyword">next</span>;<br>        &#125;<br>        slow.<span class="hljs-keyword">next</span> = slow.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>;<br><br>        <span class="hljs-keyword">return</span> dummy.<span class="hljs-keyword">next</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><h3 id="法1-2"><a href="#法1-2" class="headerlink" title="法1"></a>法1</h3><p>迭代法<br>遍历链表，先把当前节点的下一个节点存了，然后再改变指针指向</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs q">ListNode cur = head;<br>        ListNode <span class="hljs-built_in">prev</span> = <span class="hljs-built_in">null</span>;<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-built_in">null</span>)<br>        &#123;<br>            ListNode <span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span>;<br>            cur.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">prev</span>;<br>            <span class="hljs-built_in">prev</span> = cur;<br>            cur = <span class="hljs-built_in">next</span>;<br>        &#125;<br>        return <span class="hljs-built_in">prev</span>;<br></code></pre></td></tr></table></figure><h3 id="法2-2"><a href="#法2-2" class="headerlink" title="法2"></a>法2</h3><p>递归法</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">if</span><span class="hljs-built_in">(head</span> == null ||<span class="hljs-built_in"> head</span>.<span class="hljs-keyword">next</span> == null)<br>&#123;<span class="hljs-keyword">return</span><span class="hljs-built_in"> head</span>;&#125;<br>ListNode newhead = reverseList<span class="hljs-built_in">(head</span>.<span class="hljs-keyword">next</span>);<span class="hljs-built_in"></span><br><span class="hljs-built_in">head</span>.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span> =<span class="hljs-built_in"> head</span>;<span class="hljs-built_in"></span><br><span class="hljs-built_in">head</span>.<span class="hljs-keyword">next</span> = null;<br><br><span class="hljs-keyword">return</span> newhead;<br></code></pre></td></tr></table></figure><h3 id="法3-1"><a href="#法3-1" class="headerlink" title="法3"></a>法3</h3><p>回溯法</p><ol><li>递归终止条件：head为空，这时返回pre节点，就是链表的最后一个节点，作为反转链表的头节点</li><li>用res记录这个反转后的头节点</li><li>一节一节回溯改变指向</li><li>返回res<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">return</span> recur<span class="hljs-built_in">(head</span>,null);<br><br>private ListNode recur(ListNode<span class="hljs-built_in"> head</span>, ListNode pre)<br>&#123;<br><span class="hljs-keyword">if</span><span class="hljs-built_in">(head</span> == null)<span class="hljs-keyword">return</span> pre;<br>ListNode res = recur<span class="hljs-built_in">(head</span>.<span class="hljs-keyword">next</span><span class="hljs-built_in">,head</span>);<span class="hljs-built_in"></span><br><span class="hljs-built_in">head</span>.<span class="hljs-keyword">next</span> = pre;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据读取</title>
    <link href="/2021/12/06/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96/"/>
    <url>/2021/12/06/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><h2 id="读取文件的某一行"><a href="#读取文件的某一行" class="headerlink" title="读取文件的某一行"></a>读取文件的某一行</h2><h3 id="法1-从头扫描，跳过不关心的行"><a href="#法1-从头扫描，跳过不关心的行" class="headerlink" title="法1:从头扫描，跳过不关心的行"></a>法1:从头扫描，跳过不关心的行</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> linecache<br><span class="hljs-title">linecache</span>.getline(&#x27;./<span class="hljs-class"><span class="hljs-keyword">data</span>.txt&#x27;, 5)</span><br></code></pre></td></tr></table></figure><h3 id="法2-使用linecache"><a href="#法2-使用linecache" class="headerlink" title="法2:使用linecache"></a>法2:使用linecache</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./data.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">num</span>, <span class="hljs-built_in">line</span> <span class="hljs-keyword">in</span> enumerate(f):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">num</span> == <span class="hljs-number">4</span>:<br>            print(<span class="hljs-built_in">line</span>)<br>            break<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数组与矩阵</title>
    <link href="/2021/12/04/Arrays/"/>
    <url>/2021/12/04/Arrays/</url>
    
    <content type="html"><![CDATA[<h1 id="数组与矩阵"><a href="#数组与矩阵" class="headerlink" title="数组与矩阵"></a>数组与矩阵</h1><h2 id="重复数字"><a href="#重复数字" class="headerlink" title="重复数字"></a>重复数字</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">在一个长度为 <span class="hljs-built_in">n</span> 的数组里的所有数字都在 <span class="hljs-number">0</span> 到 <span class="hljs-built_in">n</span>-<span class="hljs-number">1</span> 的范围内。数组中某些数字是重复的，但不知道有几个数字是重复的，也不知道每个数字重复几次。请找出数组中任意一个重复的数字。<br><br></code></pre></td></tr></table></figure><h3 id="法1"><a href="#法1" class="headerlink" title="法1"></a>法1</h3><p>HashSet<br>时间复杂度：O(N) 空间复杂度：O(N)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">HashSet&lt;<span class="hljs-type">Integer</span>&gt; <span class="hljs-keyword">set</span> = <span class="hljs-built_in">new</span> HashSet&lt;&gt;();<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;nums.length;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">set</span>.contains(nums[i]))<br>            &#123;<br>                res = nums[i];<br>            &#125;<br>            <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(nums[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br></code></pre></td></tr></table></figure><h3 id="法2"><a href="#法2" class="headerlink" title="法2"></a>法2</h3><p>排序<br>因为长度为N，区间为0～N-1，所以只要有数字不在该在的位置上就说明有重复<br>nums[i]!=i</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;nums.length;i++)<br>       &#123;<br>           <span class="hljs-keyword">while</span>(nums[i] != i)<br>           &#123;<br>               <span class="hljs-keyword">if</span>(nums[i]==nums[nums[i]])<br>               &#123;<br>                   <span class="hljs-keyword">return</span> nums[i];<br>               &#125;<br>               <span class="hljs-built_in">swap</span>(nums,i,nums[i]);<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nums[],<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function">   </span>&#123;   <br>       <span class="hljs-keyword">int</span> tmp;<br>       tmp = nums[a];<br>       nums[a] = nums[b];<br>       nums[b] = tmp;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="在一个-n-m-的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。"><a href="#在一个-n-m-的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。" class="headerlink" title="在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。"></a>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</h2><h3 id="思路：因为已经有序，不用暴力穷举。从右上角开始查看，可以进一步缩小范围"><a href="#思路：因为已经有序，不用暴力穷举。从右上角开始查看，可以进一步缩小范围" class="headerlink" title="思路：因为已经有序，不用暴力穷举。从右上角开始查看，可以进一步缩小范围"></a>思路：因为已经有序，不用暴力穷举。从右上角开始查看，可以进一步缩小范围</h3><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stan">class Solution &#123;<br>    public boolean findNumberIn2DArray(<span class="hljs-keyword">int</span>[][] <span class="hljs-keyword">matrix</span>, <span class="hljs-keyword">int</span> <span class="hljs-built_in">target</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">matrix</span>==null || <span class="hljs-keyword">matrix</span>.length == <span class="hljs-number">0</span> || <span class="hljs-keyword">matrix</span>[<span class="hljs-number">0</span>].length ==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> false;<br>        <span class="hljs-keyword">int</span> <span class="hljs-built_in">row</span> = <span class="hljs-keyword">matrix</span>.length;<br>        <span class="hljs-keyword">int</span> <span class="hljs-built_in">col</span> = <span class="hljs-keyword">matrix</span>[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> c = <span class="hljs-built_in">col</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(r &lt;= <span class="hljs-built_in">row</span> -<span class="hljs-number">1</span> &amp;&amp; c &gt;= <span class="hljs-number">0</span> )<br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">matrix</span>[r][c]==<span class="hljs-built_in">target</span>)<br>                &#123;<span class="hljs-keyword">return</span> true;&#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">matrix</span>[r][c]&gt;<span class="hljs-built_in">target</span>)<br>                &#123;c--;&#125;<br>            <span class="hljs-keyword">else</span><br>                &#123;r++;&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> false;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(M+N),空间复杂度O(1)</p><h2 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a>顺时针打印矩阵</h2><h3 id="定义四个边界转即可，注意边界条件，主要就是边界条件"><a href="#定义四个边界转即可，注意边界条件，主要就是边界条件" class="headerlink" title="定义四个边界转即可，注意边界条件，主要就是边界条件"></a>定义四个边界转即可，注意边界条件，主要就是边界条件</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">class Solution &#123;<br>    <span class="hljs-meta">public</span> <span class="hljs-keyword">int</span>[] spiralOrder(<span class="hljs-keyword">int</span>[][] matrix) &#123;<br>        if (matrix == null || matrix<span class="hljs-number">.</span>length == <span class="hljs-number">0</span> || matrix[<span class="hljs-number">0</span>].length == <span class="hljs-number">0</span>) &#123;<br>            return new <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>]<span class="hljs-comment">;</span><br>        &#125;<br>        ArrayList&lt;Integer&gt; <span class="hljs-keyword">ret</span> = new ArrayList&lt;&gt;()<span class="hljs-comment">;</span><br>    <span class="hljs-keyword">int</span> <span class="hljs-built_in">r1</span> = <span class="hljs-number">0</span>, <span class="hljs-built_in">r2</span> = matrix<span class="hljs-number">.</span>length - <span class="hljs-number">1</span>, c1 = <span class="hljs-number">0</span>, c2 = matrix[<span class="hljs-number">0</span>].length - <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>    while (<span class="hljs-built_in">r1</span> &lt;= <span class="hljs-built_in">r2</span> &amp;&amp; c1 &lt;= c2) &#123;<br>        // 上<br>        for (<span class="hljs-keyword">int</span> i = c1<span class="hljs-comment">; i &lt;= c2; i++)</span><br>            <span class="hljs-keyword">ret</span><span class="hljs-number">.</span><span class="hljs-keyword">add</span>(matrix[<span class="hljs-built_in">r1</span>][i])<span class="hljs-comment">;</span><br>        // 右<br>        for (<span class="hljs-keyword">int</span> i = <span class="hljs-built_in">r1</span> + <span class="hljs-number">1</span><span class="hljs-comment">; i &lt;= r2; i++)</span><br>            <span class="hljs-keyword">ret</span><span class="hljs-number">.</span><span class="hljs-keyword">add</span>(matrix[i][c2])<span class="hljs-comment">;</span><br>        if (<span class="hljs-built_in">r1</span> != <span class="hljs-built_in">r2</span>)<br>            // 下<br>            for (<span class="hljs-keyword">int</span> i = c2 - <span class="hljs-number">1</span><span class="hljs-comment">; i &gt;= c1; i--)</span><br>                <span class="hljs-keyword">ret</span><span class="hljs-number">.</span><span class="hljs-keyword">add</span>(matrix[<span class="hljs-built_in">r2</span>][i])<span class="hljs-comment">;</span><br>        if (c1 != c2)<br>            // 左<br>            for (<span class="hljs-keyword">int</span> i = <span class="hljs-built_in">r2</span> - <span class="hljs-number">1</span><span class="hljs-comment">; i &gt; r1; i--)</span><br>                <span class="hljs-keyword">ret</span><span class="hljs-number">.</span><span class="hljs-keyword">add</span>(matrix[i][c1])<span class="hljs-comment">;</span><br>        <span class="hljs-built_in">r1</span>++<span class="hljs-comment">; r2--; c1++; c2--;</span><br>    &#125;<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">ret</span><span class="hljs-number">.</span>stream().mapToInt(Integer::valueOf).toArray()<span class="hljs-comment">;</span><br>        return res<span class="hljs-comment">;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="替换字符串的空格"><a href="#替换字符串的空格" class="headerlink" title="替换字符串的空格"></a>替换字符串的空格</h2><h3 id="法1-1"><a href="#法1-1" class="headerlink" title="法1"></a>法1</h3><p>用容器：StringBuilder</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> Solution &#123;<br>    public String replace<span class="hljs-constructor">Space(String <span class="hljs-params">s</span>)</span> &#123;<br>        StringBuilder res = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuilder()</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i =<span class="hljs-number">0</span>;i&lt;s.length<span class="hljs-literal">()</span>;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">i</span>)</span><span class="hljs-operator"> == </span><span class="hljs-character">&#x27; &#x27;</span>)<br>            &#123;<br>                res.append(<span class="hljs-string">&quot;%20&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            res.append(s.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">i</span>)</span>);<br>        &#125;<br>        return res.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="法2-1"><a href="#法2-1" class="headerlink" title="法2"></a>法2</h3><p>在字符串末尾添空位，然后从后往前遍历填充</p><ol><li>遇到一个空格，就在末尾加两个空位；</li><li>倒序遍历，如果没遇到就把原来字符串填充，如果遇到了就倒序填充%20；</li><li>当两个指针相遇或者遍历完时停止</li></ol><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> replaceSpace(StringBuffer <span class="hljs-built_in">str</span>) &#123;<br>    <span class="hljs-built_in">int</span> P1 = <span class="hljs-built_in">str</span>.length() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt;= P1; i++)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">str</span>.charAt(i) == <span class="hljs-string">&#x27; &#x27;</span>)<br>            <span class="hljs-built_in">str</span>.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;  &quot;</span>);<br><br>    <span class="hljs-built_in">int</span> P2 = <span class="hljs-built_in">str</span>.length() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (P1 &gt;= <span class="hljs-number">0</span> &amp;&amp; P2 &gt; P1) &#123;<br>        <span class="hljs-built_in">char</span> c = <span class="hljs-built_in">str</span>.charAt(P1--);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            <span class="hljs-built_in">str</span>.setCharAt(P2--, <span class="hljs-string">&#x27;0&#x27;</span>);<br>            <span class="hljs-built_in">str</span>.setCharAt(P2--, <span class="hljs-string">&#x27;2&#x27;</span>);<br>            <span class="hljs-built_in">str</span>.setCharAt(P2--, <span class="hljs-string">&#x27;%&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">str</span>.setCharAt(P2--, c);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0-1序列中连续1的个数"><a href="#0-1序列中连续1的个数" class="headerlink" title="0,1序列中连续1的个数"></a>0,1序列中连续1的个数</h2><p>给定一个二进制数组， 计算其中最大连续 1 的个数。</p><h3 id="法1-2"><a href="#法1-2" class="headerlink" title="法1"></a>法1</h3><p>临时变量tmp记录1的个数，遇到0先比较，然后清零；注意最后一位数字是1的情况</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findMaxConsecutiveOnes</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> maxNum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (num == <span class="hljs-number">1</span>)<br>            &#123;<br>                tmp += <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(tmp &gt; maxNum)</span></span><br><span class="hljs-function">            </span>&#123;<br>                maxNum = tmp;<br>                tmp = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                tmp = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(tmp &gt; maxNum)<br>                maxNum = tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxNum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="法2-2"><a href="#法2-2" class="headerlink" title="法2"></a>法2</h3><p>小技巧：tmp*num+num，可以做到0的时候置0，1的时候➕1</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    public <span class="hljs-built_in">int</span> findMaxConsecutiveOnes(<span class="hljs-built_in">int</span>[] nums) &#123;<br>        <span class="hljs-built_in">int</span> tmp = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> maxNum = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> <span class="hljs-built_in">num</span>: nums)<br>        &#123;<br>            tmp = tmp*<span class="hljs-built_in">num</span> + <span class="hljs-built_in">num</span>;<br>            <span class="hljs-keyword">if</span> (tmp &gt; maxNum)<br>            &#123;<br>                maxNum = tmp;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxNum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>git学习</title>
    <link href="/2021/11/25/git%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/11/25/git%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="如何使用Git"><a href="#如何使用Git" class="headerlink" title="如何使用Git"></a>如何使用Git</h1><p>今天使用Git上传了pycharm的本地代码，总结一下教训</p><h2 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> init<br><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> .<br><span class="hljs-symbol">git</span> commit -m <span class="hljs-string">&quot;xxx&quot;</span><br><span class="hljs-symbol">git</span> branch -M main<br><span class="hljs-symbol">git</span> remote <span class="hljs-keyword">add</span> origin https:<span class="hljs-comment">//github.com/zyqinsane/zyqgenius.git</span><br><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> -u origin main<br></code></pre></td></tr></table></figure><p>git branch -M 重命名分支，默认分支为master</p><p>本地是origin</p><p>默认的话是</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>每日科研1124</title>
    <link href="/2021/11/24/%E6%AF%8F%E6%97%A5%E7%A7%91%E7%A0%941124/"/>
    <url>/2021/11/24/%E6%AF%8F%E6%97%A5%E7%A7%91%E7%A0%941124/</url>
    
    <content type="html"><![CDATA[<h1 id="BrainStorm"><a href="#BrainStorm" class="headerlink" title="BrainStorm"></a>BrainStorm</h1><h2 id="关于一次失败尝试的总结"><a href="#关于一次失败尝试的总结" class="headerlink" title="关于一次失败尝试的总结"></a>关于一次失败尝试的总结</h2><h3 id="单条链路"><a href="#单条链路" class="headerlink" title="单条链路"></a>单条链路</h3><p>为复现激光通信场景的频繁闪断，将预测的时间间隔由10min缩短为1min，这样就可以很好地模拟星地激光链路的闪断效果，卫星一次过顶时间窗口为10min，十个时隙可判断，根据失效占比来判断这个窗口内的建链可能性，看这十分钟内的正常/中断/资源浪费占比。一个窗口建链一次。也就是十分钟通信一次。将这个作为选择链路的标准之一。</p><h3 id="组网考虑"><a href="#组网考虑" class="headerlink" title="组网考虑"></a>组网考虑</h3><p>如果最优链路预测错误，预测不可用，实际可用；网络将会排除该预测“不可用”的地面站，选择次优的“可用”链路转发，次优的选择也会出现预测准确与否的情况。次优的选择可用，就会造成时延增加，把这个时延差值加入进去。</p><h3 id="马尔可夫模型的参数设置"><a href="#马尔可夫模型的参数设置" class="headerlink" title="马尔可夫模型的参数设置"></a>马尔可夫模型的参数设置</h3><p>肯定也有问题，因为不能随便设置一个概率，就把这个模型预测的结果和ILWC的序列比较，这样的准确率没有意义。</p><h3 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h3><p>现在就直接把ILWC的结果拿来用就好了，不用搞预测了，作为我的输入。<br>云图是更直接的方式，因为就是01表示。可以将戴政学长的输出作为我的模型输入。</p>]]></content>
    
    
    <categories>
      
      <category>科研思路</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>每日嗑盐20211123</title>
    <link href="/2021/11/24/%E6%AF%8F%E6%97%A5%E5%97%91%E7%9B%9020211123/"/>
    <url>/2021/11/24/%E6%AF%8F%E6%97%A5%E5%97%91%E7%9B%9020211123/</url>
    
    <content type="html"><![CDATA[<h1 id="1123-brainstorm"><a href="#1123-brainstorm" class="headerlink" title="1123 brainstorm"></a>1123 brainstorm</h1><p>拓宽新思路，不能局限原论文。</p><h2 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h2><p>PaCo模型选出来，从9条链路备选中，选出一条时延最低的链路，然后选择这条链路转发。可能出现四种情况，两种会受影响；一种是链路中断，一种是链路资源浪费。</p><h2 id="马尔可夫预测模型"><a href="#马尔可夫预测模型" class="headerlink" title="马尔可夫预测模型"></a>马尔可夫预测模型</h2><p>地面站上空的天气状况，下一时刻的状态仅和当前时刻有关，建模为一阶马尔可夫模型。自行设置状态转移矩阵。每十分钟预测一次，为的是和ILWC数据对齐。将预测结果和ILWC数据进行对比，得到四种情况的数目情况。</p><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><p>100次转发，70～80次链路资源浪费，0～3次链路中断。</p><h2 id="误差分析"><a href="#误差分析" class="headerlink" title="误差分析"></a>误差分析</h2><p>1.模型本身就有问题，概率不能随意设定。ILWC原论文虽然采用的也是马尔可夫模型，但是参数是通过模型得到的。</p><p>2.所以和ILWC数据的对比也就没意义了。</p>]]></content>
    
    
    <categories>
      
      <category>科研思路</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>paper-reviewing</title>
    <link href="/2021/11/23/paper-reviewing/"/>
    <url>/2021/11/23/paper-reviewing/</url>
    
    <content type="html"><![CDATA[<h1 id="A-Distributed-and-Hybrid-Ground-Station-Network-for-Low-Earth-Orbit-Satellites"><a href="#A-Distributed-and-Hybrid-Ground-Station-Network-for-Low-Earth-Orbit-Satellites" class="headerlink" title="A Distributed and Hybrid Ground Station Network for Low Earth Orbit Satellites"></a>A Distributed and Hybrid Ground Station Network for Low Earth Orbit Satellites</h1>]]></content>
    
    
    <categories>
      
      <category>科研思路</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>docker学习</title>
    <link href="/2021/10/29/docker%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/10/29/docker%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="docker远程开发有感"><a href="#docker远程开发有感" class="headerlink" title="docker远程开发有感"></a>docker远程开发有感</h1><h2 id="pycharm连接docker"><a href="#pycharm连接docker" class="headerlink" title="pycharm连接docker"></a>pycharm连接docker</h2><p>建立磁盘映射</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> -v /xxx/xxx:/xxx containerID<br></code></pre></td></tr></table></figure><p>/xxx/xxx 宿主机</p><p>/xxx docker环境主机</p><p>ssh连接远程服务器</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> -<span class="hljs-built_in">id</span> -p 本地端口(随便设置):<span class="hljs-number">22</span>(docker端口)/xxx/xxx:/xxx containerID<br></code></pre></td></tr></table></figure><h2 id="重新进入容器"><a href="#重新进入容器" class="headerlink" title="重新进入容器"></a>重新进入容器</h2><p>守护进程docker run -id<br>守护进程运行的时候使用<code>docker attach</code>不会重新进入容器，使用<code>docker run</code>会重新新建一个容器</p><p>此时容器运行的进程是ssh，而不是/bin/bash 也没有虚拟终端（-it）参数，所以是进入不到的.<br>这个时候使用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker exec -it containerID <span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><p>退出的时候使用<br><code>ctrl+P+Q</code></p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>numpy</title>
    <link href="/2021/09/27/Python/"/>
    <url>/2021/09/27/Python/</url>
    
    <content type="html"><![CDATA[<h1 id="随手记录一下"><a href="#随手记录一下" class="headerlink" title="随手记录一下"></a>随手记录一下</h1><h2 id="numpy-histogram"><a href="#numpy-histogram" class="headerlink" title="numpy.histogram"></a>numpy.histogram</h2><p>histogram(a,bins = 10, range =None, weights =None,density =False)</p><h3 id="in-需要统计数据的数组"><a href="#in-需要统计数据的数组" class="headerlink" title="in: 需要统计数据的数组"></a>in: 需要统计数据的数组</h3><p>bins指代统计的区间个数</p><p>range表示统计范围的下界和上界</p><p>weights指定数组每个元素的权值，histogram（）会对区间中数组所对应的权值进行求和</p><p>density为True时，返回每个区间的概率密度；False，返回每个区间中元素的个数</p><pre><code>&gt;&gt;&gt; a = np.random.rand(100)      #表示在（0,1）之间随机产生100个数&gt;&gt;&gt; np.histogram(a,bins=5,range=(0,1))(array([10, 24, 17, 19, 30]), array([0. , 0.2, 0.4, 0.6, 0.8, 1. ]))#表示在[0,0.2)之间有10个数，以此类推</code></pre><h3 id="out-返回每个区间内元素的统计情况，以及区间"><a href="#out-返回每个区间内元素的统计情况，以及区间" class="headerlink" title="out: 返回每个区间内元素的统计情况，以及区间"></a>out: 返回每个区间内元素的统计情况，以及区间</h3>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2021/09/14/Git/"/>
    <url>/2021/09/14/Git/</url>
    
    <content type="html"><![CDATA[<h1 id="工欲善其事，必先利其器"><a href="#工欲善其事，必先利其器" class="headerlink" title="工欲善其事，必先利其器"></a>工欲善其事，必先利其器</h1><p>还是得把git玩熟了。做博客就是先熟悉<a href="https://github.com/giacgiuliari/ccr-internet-backbones-in-space">github</a>的过程。</p><h2 id="git常用操作mark一下"><a href="#git常用操作mark一下" class="headerlink" title="git常用操作mark一下"></a>git常用操作mark一下</h2><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p><code>git init</code> 初始化仓库<br><code>git clone</code> 拷贝一份远程仓库</p><h3 id="提交与修改"><a href="#提交与修改" class="headerlink" title="提交与修改"></a>提交与修改</h3><p><code>git add</code> 添加文件到仓库<br><code>git status</code> 查看仓库现在状态，显示变更文件<br><code>git commit</code> 提交暂存到本地仓库<br><code>git reset</code> 回退版本<br><code>git rm</code> 删除工作区文件<br><code>git mv</code> 移动或重命名工作区文件</p><h3 id="提交日志"><a href="#提交日志" class="headerlink" title="提交日志"></a>提交日志</h3><p><code>git log</code> 查看历史提交记录<br><code>git blame &lt;file&gt;</code> 以列表形式查看指定文件的历史修改记录</p><h3 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h3><p><code>git remote</code> 远程仓库操作<br><code>git fetch</code> 从远程获取代码库<br><code>git pull</code> 下载远程代码并合并<br><code>git push</code> 上传远程代码并合并</p><h2 id="散会"><a href="#散会" class="headerlink" title="散会"></a>散会</h2><p>饿了，开饭。</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/2021/09/14/docker/"/>
    <url>/2021/09/14/docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p><a href="https://yeasy.gitbook.io/docker_practice/">Docker</a>，是比虚拟机好用很多，很多公司部署服务器必不可少的轻量化容器。正好手头的这个项目原作者用到了docker部署，那就趁机学习一波，为明年面试做准备。</p><h2 id="容易混淆的两个概念："><a href="#容易混淆的两个概念：" class="headerlink" title="容易混淆的两个概念："></a>容易混淆的两个概念：</h2><p>docker 相当于建立一个完整的操作系统，是不依赖于硬件的虚拟机；</p><p>pipenv是在docker容器中建立的虚拟python环境。</p><h2 id="2021-7-30-崩溃边缘"><a href="#2021-7-30-崩溃边缘" class="headerlink" title="2021.7.30 崩溃边缘"></a>2021.7.30 崩溃边缘</h2><p>搞了一天。<br>看别人的项目就要付出成倍的学习成本，sigh…..谁让自己没有能力把一个项目从无到有拎出来呢。<br>买来macbook也有小一个月了。之前配置好docker，开心的要死。但是实际轻度开发一个月以来，我发现了以下的问题：<br>由于我的项目是python，买mac之前使用的IDE是pycharm，这样看起来代码之间的逻辑比较清晰。但是由于是在docker里面配的python环境，所以这一个月以来，pycharm就成了我的一个代码阅读工具，或者是一个编辑器。把代码在本地编辑完成后，copy到docker中运行，调试。</p><p>这就很蛋疼了。</p><p>因为首先，docker没有可视化界面，而代码项目又有好多子代码。代码之间的切换让人十分头大。其次，docker中只能用vim进行开发（虽然大佬都比较喜欢），但是vim有个致命的缺点，就是对于代码缩进敏感的语言，简直不友好到了极点。python对于tab和空格，十分敏感，因为它就靠着这个区分函数之间的逻辑关系的。vim中，tab就是tab，空格就是空格，但是pycharm中，tab被自动作为四个空格处理。所以，复制过去，我还得一行一行调格式，宝贵的debug时间就这么被浪费了，那怎么行。</p><p>今天，我灵光一闪，为什么我就不能把代码放在本地，把docker远程部署好，在本地调试呢？这样的话，效率不就大大提高了！<br>说干就干，我上网搜了一下关键词，pycharm，docker。果然一堆结果。大致说的就是，把python的本地解释器换成docker里面的python，即可。想想确实是这个道理，作为高级语言的python，只需要解释器即可编译运行。有了解释器，就有了一切。</p><p>但是照葫芦画瓢搞了半天，我才发现，为什么tmd我的解释器栏咩有docker选项啊？？思前想后鼓捣了半天，我才想起来，不会是贫穷限制了我的想象力吧。果断搜索，社区版和专业版的区别，一行字让我心碎：社区版不支持远程开发。docker，可不就是为远程开发而生的吗。。</p><p>行吧。搞专业版。找了半天，也没有最新的破解版。m1芯片真难受。不过后来发现了一个要钱的下载无限重置试用期的专业版。哎，得了，就当尊重人家劳动成果。30软妹币解决。</p><p>装好了，美滋滋破解，打开。</p><p>果然，花了钱就是不一样。有docker了。半个小时，终于配置好了！<br>可是，从哪可以调试呢？</p><p>我想了半天，如果要实现方便的话，肯定是pycharm右击就可以直接运行，没有中间商赚差价。可是，为什么我的python包好多都没有呢？？还一片飘红（基金这样多好）？？？</p><p>又琢磨了半天。CSDN都被翻烂了。都是一篇抄一篇。垃圾。<br>又想了一下，终于知道我问题的特殊性在哪里了。原来我之前一直都只考虑了普遍性。啧。唯物辩证法还是得好好学。这个项目的特殊之处，就在于他使用了pipenv来创建python的虚拟环境！</p><p>我好像找到了问题的症结，高兴得心跳加快。国内网站不靠谱了，我google了一下：docker，pipenv，pycharm。颤抖的手点开第一条。</p><p>果然。<br>之前docker镜像创建的一个容器等于只是实现了一个丐版的操作系统。但是没有python的包啊！<br>项目用的python，就是这个容器，里的，用pipenv创建的python环境。</p><p>网上大佬说要用which python作为命令行。<br>果断搜索，找到了项目真正使用的python！但是复制完居然不能直接拷贝到pycharm的解释器里，离谱。。一个字一个字敲进去后，我激动地按下回车。<br>果然，python的包在屏幕上一个接一个跳了出来，就像我的心，也快跳出胸腔一样。奈斯！</p><p>这时候我才意识到，问题解决了。</p><p>学他妈的。</p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日心得</title>
    <link href="/2021/09/14/%E4%BB%8A%E6%97%A5%E5%BF%83%E5%BE%97/"/>
    <url>/2021/09/14/%E4%BB%8A%E6%97%A5%E5%BF%83%E5%BE%97/</url>
    
    <content type="html"><![CDATA[<h1 id="今天又是CV的一天"><a href="#今天又是CV的一天" class="headerlink" title="今天又是CV的一天"></a>今天又是CV的一天</h1><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><p>反转元音字母</p><p>指针1从头遍历，指针2从尾遍历，都遇到元音字母时交换。</p><p>为了查询速度为常数时间项，建立元音字母的哈希Set </p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>强制类型转换</p><p>反转int整数，但是int可能越界，遇到异常需要置0.</p><p>用一个快捷判断就好了 (int)n == n ? (int)n : 0</p><h2 id="散会"><a href="#散会" class="headerlink" title="散会"></a>散会</h2><p>就这样吧</p>]]></content>
    
    
    <categories>
      
      <category>技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>check</title>
    <link href="/2021/09/13/check/"/>
    <url>/2021/09/13/check/</url>
    
    <content type="html"><![CDATA[<h2 id="how-to-live"><a href="#how-to-live" class="headerlink" title="how to live"></a>how to live</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>New Boy</title>
    <link href="/2021/09/13/New-Boy/"/>
    <url>/2021/09/13/New-Boy/</url>
    
    <content type="html"><![CDATA[<h1 id="今日任务"><a href="#今日任务" class="headerlink" title="今日任务"></a>今日任务</h1><p>hey各位，今天是个美好的一天</p><p>不熬夜</p><h2 id="还不知道的事"><a href="#还不知道的事" class="headerlink" title="还不知道的事"></a>还不知道的事</h2><p>不知道将会遇到什么</p><h2 id="再说吧"><a href="#再说吧" class="headerlink" title="再说吧"></a>再说吧</h2><p>再会</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
